#include "imports/stdlib.fc";

const op::verify = "op::verify"c;
const int P1_SIZE = 48 * 8;
const int P2_SIZE = 96 * 8;



const slice IC0 = "b9c6ad838d38f3c3d0d303f49548341e3f798a427c840d5d4e54be59d506738b6e6e978657f8ead6e13c76d417d56686"s;
const slice IC1 = "81d39df7f3ac107f3f5fd10b63d006a4a287ee07ae6db498bbaeff2a43c13444cc64d608c89f9091c7c88831e42f4046"s;
const slice IC2 = "b078718aaf087ce8148fbe7eba02b444a123a9bd2ef91cde03fb6d21e3e59785e8d6a8dac0b7cd448a89a65a1a63589a"s;

const slice vk_gamma_2 = "93e02b6052719f607dacd3a088274f65596bd0d09920b61ab5da61bbdc7f5049334cf11213945d57e5ac7d055d042b7e024aa2b2f08f0a91260805272dc51051c6e47ad4fa403b02b4510b647ae3d1770bac0326a805bbefd48056c8c121bdb8"s;
const slice vk_delta_2 = "a474b84df09e6fc03710633925f6602591380ea87fa54cef50565aa685f14b52c56fbcbe0ad3a6cc50ed2eecd4ffdf2810290b29439a7b102717bb6819785280a043d1d56fe1c643e0b5293b2a9def6ec2a0684e9e26a7772d41dbe6577b72ff"s;
const slice vk_alpha_1 = "86eb9de1fae7b540e09c26303cee8b99784835d37bf46f3fb1db25b7b063d9ab9aa866e79f7cc4eb209224c8465b9bde"s;
const slice vk_beta_2 = "9091cd3cdc8abaa367a61d5e094dc91ceec4a831f9c995e0b6d38cff4a9cf897a6bb7cc6d1fbb54068bbd8bb479e56d5010417ac1b215ac661897a156c587791a9cc20dffd3d60009696a749136c6b874f8f7a6c2e951843ef410ee953d0354c"s;

slice bls_g1_add(slice x, slice y) asm "BLS_G1_ADD";
slice bls_g1_neg(slice x) asm "BLS_G1_NEG";
slice bls_g1_multiexp(
    
    slice x1, int y1,
    
    slice x2, int y2,
    
    int n
) asm "BLS_G1_MULTIEXP";
int bls_pairing(slice x1, slice y1, slice x2, slice y2, slice x3, slice y3, slice x4, slice y4, int n) asm "BLS_PAIRING";

global int ctx_res;

;; load_data populates storage variables using stored data
() load_data() impure {

    var ds = get_data().begin_parse();

    ctx_res = ds~load_uint(32);

    ds.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure {
    set_data(
        begin_cell()
            .store_uint(ctx_res, 32)
            .end_cell()
    );
}


(slice, slice) load_p1(slice body) impure {
    cell c = body~load_ref();
    slice s = c.begin_parse();
    slice p1 = first_bits(s, P1_SIZE);
    s~skip_bits(P1_SIZE);
    return (s, p1);
}

(slice, slice) load_p2(slice body) impure {
    cell c = body~load_ref();
    slice s = c.begin_parse();
    slice p2 = first_bits(s, P2_SIZE);
    s~skip_bits(P2_SIZE);
    return (s, p2);
}

(slice, int) load_newint(slice body) impure {
    cell c = body~load_ref();
    slice s = c.begin_parse();
    int x = s~load_uint(256);
    return (s, x);
}

() groth16Verify(
    slice pi_a,
    slice pi_b,
    slice pi_c,
    
    int pubInput0 ,
    
    int pubInput1 
    
) impure {

    slice cpub = bls_g1_multiexp(
        
        IC1, pubInput0,
        
        IC2, pubInput1,
        
        2
    );


    cpub = bls_g1_add(cpub, IC0);
    slice pi_a_neg = bls_g1_neg(pi_a);
    int a = bls_pairing(
        cpub, vk_gamma_2,
        pi_a_neg, pi_b,
        pi_c, vk_delta_2,
        vk_alpha_1, vk_beta_2,
        4);
    ;; ctx_res = a;
    if (a == 0) {
        ctx_res = 0;
    } else {
        ctx_res = 1;
    }
    save_data();
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case

    
    if (op == op::verify) {

        slice pi_a = in_msg_body~load_p1();
        slice pi_b = in_msg_body~load_p2();
        slice pi_c = in_msg_body~load_p1();


        
        int pubInput0 = in_msg_body~load_newint();
        
        int pubInput1 = in_msg_body~load_newint();
        

        groth16Verify(
            pi_a,
            pi_b,
            pi_c,
            
            pubInput0 ,
            
            pubInput1 
            
        );
        return ();
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}


int get_res() method_id {
    load_data();
    return ctx_res;
}
