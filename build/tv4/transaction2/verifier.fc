#include "imports/stdlib.fc";

const op::verify = "op::verify"c;
const int P1_SIZE = 48 * 8;
const int P2_SIZE = 96 * 8;



const slice IC0 = "9945677067d04e9580ea171a1fd90c603a05ffcb035fc281d7e531d54a5f2cc7776a16aa3b1ecc1790c1b19b49c1d039"s;
const slice IC1 = "804226712177962af9d3a336f758a1de219927cf0dfec60aeaee1b4f3ac7c8dbed056879794a157f02c4acfe4bece459"s;
const slice IC2 = "85ee04f90e74da989a9f08c7108f880c9905ac4a2e8db816215eb5bcf7a628e468f8b2e1ddd58fbfe6c9eeb51d5e512d"s;
const slice IC3 = "818cf7dd0b851a3c9d3e651ea72b1440e5e1192f00028048b2d2991447dc2c7790cdff914dbeea0fb7d4e32a6ddd0e48"s;
const slice IC4 = "b0347a19fc3f0f1a460ad45470fbe24701df893fec3902a9e677e96027972833a8fe591b745c8d02e7514d574ac03844"s;
const slice IC5 = "a5b39f216568118429dd651836de3d8663e4f36273b14652282157802c35fd1190ef0ff56ae67aa60b4c2c1ea44e84a5"s;
const slice IC6 = "a7dfaac4f604325d7c113c52129ee9c6e6fef9490e9964119a884c31021299a26a76c0b1ca11bafdee2e69c94a860196"s;
const slice IC7 = "a23cd821fb7167b307ca3b0bbc9e639151b2388951cd7c38d98dbe9c9eecdfba60acc1f2ee1adea3831a32f392171146"s;

const slice vk_gamma_2 = "93e02b6052719f607dacd3a088274f65596bd0d09920b61ab5da61bbdc7f5049334cf11213945d57e5ac7d055d042b7e024aa2b2f08f0a91260805272dc51051c6e47ad4fa403b02b4510b647ae3d1770bac0326a805bbefd48056c8c121bdb8"s;
const slice vk_delta_2 = "a844ace9da2c9a376718891b978b1ab9414adb794d6f470cfa9b3826b673dc6b5dd2bf03741149ddf01d55d7e283f7610973514d4c74cf404829af4a736be3ed491d976319eb1b802b902bb9b2d0aca0d83a8e1098ce81b0717569f9a9a70ee7"s;
const slice vk_alpha_1 = "ac7d702040f8605838e8a33df1d873128a5a8af3874e0a32e08fc56b35c143c94b73d5284de0efee6494e2f70fe8ac40"s;
const slice vk_beta_2 = "ad621c5feb3a525f0a20a834fea9eb8b2009bcd77075f1c8fa8a7da0c4e2b4adeb388840c1eb739a4f3f4956f7de6f2e145d4681628e7a756eb9338645ddda256f061baa5a5aef1d15e7a309d4b968bb7d636fe2b108c91de4d24bd1aadc2c84"s;

slice bls_g1_add(slice x, slice y) asm "BLS_G1_ADD";
slice bls_g1_neg(slice x) asm "BLS_G1_NEG";
slice bls_g1_multiexp(
    
    slice x1, int y1,
    
    slice x2, int y2,
    
    slice x3, int y3,
    
    slice x4, int y4,
    
    slice x5, int y5,
    
    slice x6, int y6,
    
    slice x7, int y7,
    
    int n
) asm "BLS_G1_MULTIEXP";
int bls_pairing(slice x1, slice y1, slice x2, slice y2, slice x3, slice y3, slice x4, slice y4, int n) asm "BLS_PAIRING";

global int ctx_res;

;; load_data populates storage variables using stored data
() load_data() impure {

    var ds = get_data().begin_parse();

    ctx_res = ds~load_uint(32);

    ds.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure {
    set_data(
        begin_cell()
            .store_uint(ctx_res, 32)
            .end_cell()
    );
}


(slice, slice) load_p1(slice body) impure {
    cell c = body~load_ref();
    slice s = c.begin_parse();
    slice p1 = first_bits(s, P1_SIZE);
    s~skip_bits(P1_SIZE);
    return (s, p1);
}

(slice, slice) load_p2(slice body) impure {
    cell c = body~load_ref();
    slice s = c.begin_parse();
    slice p2 = first_bits(s, P2_SIZE);
    s~skip_bits(P2_SIZE);
    return (s, p2);
}

(slice, int) load_newint(slice body) impure {
    cell c = body~load_ref();
    slice s = c.begin_parse();
    int x = s~load_uint(256);
    return (s, x);
}

() groth16Verify(
    slice pi_a,
    slice pi_b,
    slice pi_c,
    
    int pubInput0 ,
    
    int pubInput1 ,
    
    int pubInput2 ,
    
    int pubInput3 ,
    
    int pubInput4 ,
    
    int pubInput5 ,
    
    int pubInput6 
    
) impure {

    slice cpub = bls_g1_multiexp(
        
        IC1, pubInput0,
        
        IC2, pubInput1,
        
        IC3, pubInput2,
        
        IC4, pubInput3,
        
        IC5, pubInput4,
        
        IC6, pubInput5,
        
        IC7, pubInput6,
        
        7
    );


    cpub = bls_g1_add(cpub, IC0);
    slice pi_a_neg = bls_g1_neg(pi_a);
    int a = bls_pairing(
        cpub, vk_gamma_2,
        pi_a_neg, pi_b,
        pi_c, vk_delta_2,
        vk_alpha_1, vk_beta_2,
        4);
    ;; ctx_res = a;
    if (a == 0) {
        ctx_res = 0;
    } else {
        ctx_res = 1;
    }
    save_data();
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case

    
    if (op == op::verify) {

        slice pi_a = in_msg_body~load_p1();
        slice pi_b = in_msg_body~load_p2();
        slice pi_c = in_msg_body~load_p1();


        
        int pubInput0 = in_msg_body~load_newint();
        
        int pubInput1 = in_msg_body~load_newint();
        
        int pubInput2 = in_msg_body~load_newint();
        
        int pubInput3 = in_msg_body~load_newint();
        
        int pubInput4 = in_msg_body~load_newint();
        
        int pubInput5 = in_msg_body~load_newint();
        
        int pubInput6 = in_msg_body~load_newint();
        

        groth16Verify(
            pi_a,
            pi_b,
            pi_c,
            
            pubInput0 ,
            
            pubInput1 ,
            
            pubInput2 ,
            
            pubInput3 ,
            
            pubInput4 ,
            
            pubInput5 ,
            
            pubInput6 
            
        );
        return ();
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}


int get_res() method_id {
    load_data();
    return ctx_res;
}
